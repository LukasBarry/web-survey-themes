{"version":3,"sources":["ColorPicker.js","ProgressBar.js","Survey.js","App.js","serviceWorker.js","index.js"],"names":["SketchExample","name","value","onChange","useState","displayColorPicker","color","state","setState","styles","reactCSS","width","height","borderRadius","background","swatch","padding","marginTop","verticalAlign","boxShadow","display","cursor","popover","position","zIndex","cover","backgrouColor","top","right","bottom","left","style","onClick","hex","Progress","primary","themes","className","backgroundColor","Survey","props","ua","window","navigator","userAgent","iOS","match","webkit","iOSSafari","secondary","tertiary","type","borderColor","classNames","COLORS","App","colors","setColors","handleChange","ColorPicker","e","Boolean","location","hostname","ReactDOM","render","document","getElementById","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.78377156.chunk.js","sourcesContent":["import React, { useState } from 'react'\nimport reactCSS from 'reactcss'\nimport { SketchPicker } from 'react-color'\n\nfunction SketchExample({ name, value, onChange }) {\n  const [state, setState] = useState({\n      displayColorPicker: false,\n      color: value,\n  })\n\n  const handleClick = () => {\n    setState({ ...state, displayColorPicker: !state.displayColorPicker })\n  };\n\n  const handleClose = () => {\n    setState({ ...state, displayColorPicker: false })\n  };\n\n  const handleChange = (color) => {\n    setState({ ...state, color: color.hex })\n    onChange({ name, color: color.hex })\n  };\n\n  const styles = reactCSS({\n    'default': {\n      color: {\n        width: '36px',\n        height: '14px',\n        borderRadius: '2px',\n        background: state.color,\n      },\n      swatch: {\n        padding: '5px',\n        marginTop: '10px',\n        verticalAlign: 'sub',\n        background: '#fff',\n        borderRadius: '1px',\n        boxShadow: '0 0 0 1px rgba(0,0,0,.1)',\n        display: 'inline-block',\n        cursor: 'pointer',\n      },\n      popover: {\n        position: 'absolute',\n        zIndex: '2',\n      },\n      cover: {\n        backgrouColor: 'red',\n        position: 'fixed',\n        top: '0px',\n        right: '0px',\n        bottom: '0px',\n        left: '0px',\n      },\n    },\n  });\n\n  return (\n    <>\n      <div style={styles.swatch} onClick={handleClick}>\n        <div style={styles.color} />\n      </div>\n      {state.displayColorPicker ? <div style={styles.popover}>\n        <div style={styles.cover} onClick={handleClose}/>\n        <SketchPicker color={state.color} onChange={handleChange} />\n      </div> : null}\n    </>\n  )\n}\n\nexport default SketchExample;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport './progress.css'\n\nconst Progress = ({ themes }) => {\n  const { primary } = themes;\n\n  return (\n    <div className=\"wrapper\">\n      <div className=\"background\">\n        <div className=\"line\" style={{ backgroundColor: primary }} />\n      </div>\n    </div>\n  );\n};\n\nProgress.propTypes = {\n  themes: PropTypes.shape().isRequired,\n};\n\nexport default Progress;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport Progress from './ProgressBar';\nimport './survey.css'\nimport classNames from 'classnames';\n\nfunction Survey(props) {\n  const ua = window.navigator.userAgent;\n  const iOS = !!ua.match(/iPad/i) || !!ua.match(/iPhone/i);\n  const webkit = !!ua.match(/WebKit/i);\n  const iOSSafari = iOS && webkit && !ua.match(/CriOS/i);\n\n  const { primary, secondary, tertiary } = props.themes;\n\n  return (\n    <div className=\"survey\" style={{ backgroundColor: tertiary }}>\n      <nav className=\"navbar navbar-light\" style={{ backgroundColor: secondary }}>\n        <button\n          type=\"button\"\n          className={'btn btn-secondary'}\n          style={{ width: '60px', height: '38px' }}/>\n\n        <Progress themes={props.themes} />\n      </nav>\n\n      <div className=\"card\" style={{ width: '30rem' }}>\n        <div className=\"card-body\">\n          <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.</p>\n          <textarea\n            style={{ borderColor: primary }}\n            className={classNames('form-control my-4', {\n              'd-none d-sm-block': !iOSSafari,\n              'd-block': iOSSafari,\n            })} />\n\n          <button\n            type='button'\n            className=\"conditional btn btn-secondary\"\n            style={{\n              backgroundColor: primary,\n              width: '60px',\n              height: '38px'\n            }} />\n        </div>\n      </div>\n    </div>\n  );\n}\n\nSurvey.propTypes = {\n  themes: PropTypes.shape().isRequired,\n};\n\nexport default Survey;\n","import React, { useState } from 'react';\nimport './App.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nimport ColorPicker from './ColorPicker';\nimport Survey from './Survey'\n\nconst COLORS = {\n  primary: '#cc0000',\n  secondary: '#000000',\n  tertiary: '#a2aaaa',\n}\n\nfunction App() {\n  const [state, setState] = useState(COLORS)\n  const [colors, setColors] = useState(COLORS)\n\n  function handleSubmit(e) {\n    setColors(state);\n  }\n\n  function handleChange({ name, color }) {\n    setState({\n      ...state,\n      [name]: color,\n    });\n  }\n\n  return (\n    <>\n      <div className=\"App\">\n        <div className=\"popup\">\n          <label className=\"label\">Primary:</label>\n          <ColorPicker\n            name=\"primary\"\n            value={state.primary}\n            onChange={handleChange} />\n        </div>\n        <div className=\"popup\">\n          <label className=\"label\">Secondary:</label>\n          <ColorPicker\n            name=\"secondary\"\n            value={state.secondary}\n            onChange={handleChange} />\n        </div>\n        <div className=\"popup\">\n          <label className=\"label\">Tertiary:</label>\n          <ColorPicker\n            name=\"tertiary\"\n            value={state.tertiary}\n            onChange={handleChange} />\n        </div>\n        <div className=\"popup\">\n          <input type=\"button\" value=\"Submit\" className=\"submit btn btn-secondary\" onClick={handleSubmit} />\n        </div>\n      </div>\n      <p className=\"colors\">\n        {`{ 'primary' => '${colors.primary}', 'secondary' => '${colors.secondary}', 'tertiary' => '${colors.tertiary}' }`}\n      </p>\n      <Survey themes={colors} />\n    </>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}